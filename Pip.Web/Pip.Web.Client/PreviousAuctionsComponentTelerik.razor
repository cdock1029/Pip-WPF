@* <TelerikGrid
    @ref="GridRef"
    Width="100%"
    Height="100%"
    Data="@Treasuries"
    Pageable="false"
    Sortable="true"
    SortMode="SortMode.Multiple"
    Groupable="true"
    LoadGroupsOnDemand="false"
    OnStateInit="@((GridStateEventArgs<Treasury> args) => OnGridStateInit(args))"
    OnStateChanged="@((GridStateEventArgs<Treasury> args) => OnStateChangedHandler(args))"
    Size="@(ThemeConstants.Grid.Size.Small)"
    FilterMode="@GridFilterMode.None">
    <GridToolBar>
        <GridToolBarCustomTool>
            <TelerikDropDownList
                Data="Years"
                DefaultText="@_defaultText"
                ValueChanged="(int year) => HandleYearChanged(year)"/>
        </GridToolBarCustomTool>
    </GridToolBar>
    <GridColumns>
        <Telerik.Blazor.Components.GridColumn Field="@nameof(Treasury.AnnouncementDate)" Title="Announcement Date" DisplayFormat="@($"{{0:{Statics.DateFormatString}}}")"/>
        <Telerik.Blazor.Components.GridColumn Field="@nameof(Treasury.AuctionDate)" Title="Auction Date" DisplayFormat="@($"{{0:{Statics.DateFormatString}}}")"/>
        <Telerik.Blazor.Components.GridColumn Field="@nameof(Treasury.Cusip)" Title="CUSIP"/>
        <Telerik.Blazor.Components.GridColumn Field="@nameof(Treasury.Type)"/>
        <Telerik.Blazor.Components.GridColumn Field="@nameof(Treasury.IssueDate)" Title="Issue Date" DisplayFormat="@($"{{0:{Statics.DateFormatString}}}")"/>
        <Telerik.Blazor.Components.GridColumn Field="@nameof(Treasury.MaturityDate)" Title="Maturity Date" DisplayFormat="@($"{{0:{Statics.DateFormatString}}}")"/>
        <Telerik.Blazor.Components.GridColumn Field="@nameof(Treasury.SecurityTerm)" Title="Term"/>
        <Telerik.Blazor.Components.GridColumn Field="@nameof(Treasury.SecurityType)" Title="Type"/>
    </GridColumns>
</TelerikGrid> *@

@code {

    // [Parameter] public IEnumerable<Treasury>? Treasuries { get; set; }

    // [Parameter] public IEnumerable<int>? Years { get; set; }

    // [Parameter] public required EventCallback<int?> YearChangedCallback { get; set; }

    // string? _defaultText = "Choose year";

    // bool GridGroupFlag { get; set; } = false;

    // TelerikGrid<Treasury>? GridRef { get; set; }


    // async Task HandleYearChanged(int year)
    // {
    //     _defaultText = null;
    //     await YearChangedCallback.InvokeAsync(year);
    // }

    // void OnGridStateInit(GridStateEventArgs<Treasury> args)
    // {
    //     var gridState = new GridState<Treasury>
    //     {
    //         GroupDescriptors =
    //         [
    //             new GroupDescriptor
    //             {
    //                 Member = nameof(Treasury.Type),
    //                 MemberType = typeof(TreasuryType),
    //                 SortDirection = ListSortDirection.Ascending
    //             },
    //             new GroupDescriptor
    //             {
    //                 Member = nameof(Treasury.SecurityTerm),
    //                 MemberType = typeof(string),
    //                 SortDirection = ListSortDirection.Ascending
    //             }
    //         ],
    //         SortDescriptors = [
    //             new SortDescriptor
    //             {
    //                 Member = nameof(Treasury.AuctionDate),
    //                 SortDirection = ListSortDirection.Ascending
    //             }
    //         ],
    //         CollapsedGroups = Enumerable.Range(0, (Treasuries ?? []).ToList().Count()).ToList()
    //     };

    //     args.GridState = gridState;
    // }

    // void OnStateChangedHandler(GridStateEventArgs<Treasury> args)
    // {
    //     if (args.PropertyName == "Page")
    //     {
    //         GridGroupFlag = true;
    //     }
    // }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (GridGroupFlag)
    //     {
    //         GridState<Treasury> gridState = GridRef!.GetState();
    //         gridState.CollapsedGroups = Enumerable.Range(0, (Treasuries ?? []).ToList().Count).ToList();
    //         GridGroupFlag = false;
    //         await GridRef.SetStateAsync(gridState);
    //     }

    //     await base.OnAfterRenderAsync(firstRender);
    // }

}