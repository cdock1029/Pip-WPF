@using SortDirection = Syncfusion.Blazor.Grids.SortDirection

@inject ITreasuryDataProvider TreasuryDataProvider

<div class="relative flex h-px flex-auto flex-col">

    <div class="mb-4">
        <FluentSelect
            Disabled="_isLoading || !RendererInfo.IsInteractive"
            TOption="int"
            Items="Years"
            SelectedOptionChanged="LoadData"
            Placeholder="Choose year"
            Height="300px"
            Appearance="Appearance.Stealth"/>
    </div>
    <div class="relative h-px flex-1 overflow-hidden">
        <SfGrid Height="100%" DataSource="@_treasuries" RowHeight="32" AllowPaging="false" AllowGrouping="true" AllowSorting="true">
            <GridGroupSettings EnableLazyLoading="true" Columns="[nameof(Treasury.Type), nameof(Treasury.SecurityTerm)]"/>
            <GridSortSettings>
                <GridSortColumns>
                    <GridSortColumn Field="@nameof(Treasury.AuctionDate)" Direction="SortDirection.Ascending"></GridSortColumn>
                </GridSortColumns>
            </GridSortSettings>
            <GridColumns>
                <GridColumn Field="@nameof(Treasury.AnnouncementDate)" Format="@Statics.DateFormatString"/>
                <GridColumn Field="@nameof(Treasury.AuctionDate)" Format="@Statics.DateFormatString"/>
                <GridColumn Field="@nameof(Treasury.Cusip)" HeaderText="CUSIP"/>
                <GridColumn Field="@nameof(Treasury.Type)"/>
                <GridColumn Field="@nameof(Treasury.IssueDate)" HeaderText="Issue Date" Format="@Statics.DateFormatString"/>
                <GridColumn Field="@nameof(Treasury.MaturityDate)" HeaderText="Maturity Date" Format="@Statics.DateFormatString"/>
                <GridColumn Field="@nameof(Treasury.SecurityTerm)" HeaderText="Term" SortComparer="new TermSorter()"/>
                <GridColumn Field="@nameof(Treasury.SecurityType)" HeaderText="Security Type"/>
            </GridColumns>

            @if (_isLoading || !RendererInfo.IsInteractive)
            {
                <div class="absolute top-1/2 left-1/2 z-10">
                    <FluentProgressRing></FluentProgressRing>
                </div>
            }
        </SfGrid>
    </div>
</div>

@code {
    static IEnumerable<int>? Years { get; } = Enumerable.Range(1997, DateTime.Now.Year - 1997 + 1).Reverse();

    IEnumerable<Treasury>? _treasuries;

    bool _isLoading;

    private async Task LoadData(int year)
    {
        await InvokeAsync(() =>
        {
            _isLoading = true;
            _treasuries = [];
            StateHasChanged();
        });
        //await _spinnerRef.ShowAsync();

        DateOnly start = new(year, 1, 1);
        DateOnly end = new(year, 12, 31);

        IEnumerable<Treasury>? data = await TreasuryDataProvider.AnnouncementsResultsSearch(start, end);

        await Task.Delay(200);
        await InvokeAsync(() =>
        {
            _isLoading = false;
            StateHasChanged();
            _treasuries = data;
            StateHasChanged();
        });
        //await _spinnerRef.HideAsync();
    }

    class TermSorter : IComparer<object>
    {
        public int Compare(object? o1, object? o2)
        {
            if (o1 is not Treasury t1 || o2 is not Treasury t2 || t1.MaturityDate is not { } m1 || t2.MaturityDate is not { } m2 || t1.IssueDate is not { } i1 || t2.IssueDate is not { } i2) return 0;

            int span1 = m1.DayNumber - i1.DayNumber;
            int span2 = m2.DayNumber - i2.DayNumber;

            return span1 - span2;
        }
    }


}