@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Size24 = Microsoft.FluentUI.AspNetCore.Components.Icons.Color.Size24
@inject Settings Settings
@inject IJSRuntime Js
@inject NavigationManager NavigationManager

<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon"/>
    <label for="navmenu-toggle" class="navmenu-icon">
        <FluentIcon Value="@(new Size20.Navigation())" Color="Color.Fill"/>
    </label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Width="280" Collapsible="false" Title="Navigation menu" @bind-Expanded:get="_expanded" @bind-Expanded:set="HandleSetExpanded" CustomToggle="true">
            <FluentNavLink @onmousedown="@(async () => await HandleNavClick(""))" Href="/" Match="NavLinkMatch.All" Tooltip="Home" Icon="@(new Size24.Home())" IconColor="Color.Accent">Home</FluentNavLink>
            <FluentNavLink @onmousedown="@(async () => await HandleNavClick("auctions"))" Href="auctions" Tooltip="Auctions" Icon="@(new Size24.ClipboardTextEdit())" IconColor="Color.Accent">Auctions</FluentNavLink>
            <FluentNavLink @onmousedown="@(async () => await HandleNavClick("previous"))" Href="previous" Tooltip="Historical" Icon="@(new Size24.CalendarClock())" IconColor="Color.Accent">Historical</FluentNavLink>
            <FluentNavLink @onmousedown="@(async () => await HandleNavClick("investments"))" Href="investments" Tooltip="Investments" Icon="@(new Size24.ArrowTrendingLines())" IconColor="Color.Accent">Investments</FluentNavLink>
            <FluentNavLink @onmousedown="@(async () => await HandleNavClick("demo"))" Href="demo" Tooltip="Demo" Icon="@(new Size24.Beach())" IconColor="Color.Accent">Demo</FluentNavLink>
        </FluentNavMenu>
    </nav>
</div>

@code {
    // maybe add to NavLinks?
    // preventDefault_onclick="@true"
    // Steve Sanderson https://github.com/dotnet/aspnetcore/issues/18460#issuecomment-578232512

    bool _expanded = true;

    DotNetObjectReference<NavMenu>? _objRef;

    protected override void OnInitialized()
    {
        _objRef = DotNetObjectReference.Create(this);
    }

    void HandleSetExpanded(bool val)
    {
    }

    async Task HandleNavClick(string href)
    {
        await Js.InvokeVoidAsync("NavJs", _objRef, href);
        //await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void NavMenuCallback(string href)
    {
        NavigationManager.NavigateTo(href);
    }

}