@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ITreasuryDataProvider TreasuryDataProvider
@inject AppState AppState
@inject IToastNotificationService ToastService

<div style="padding-left:2px; display:flex;flex-direction:column;">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" HorizontalGap="10" Class="pt-4">

        <FluentSearch @ref="_fluentSearchRef" @onfocusin="() => MenuOpen = true" @onfocusout="() => MenuOpen = false" @bind-Value="SearchString" Immediate="true" Placeholder="Search CUSIP" AutoComplete="off" Autofocus="true"/>

        <FluentButton Title="Search" Disabled="string.IsNullOrEmpty(SearchString.Trim())" OnClick="Search" Appearance="Appearance.Accent" IconEnd="@(new Size16.Search())"/>


    </FluentStack>
    <div style="position:relative;">
        <div id="menu-holder" style="position:absolute;top:0;left:0;right:0;z-index:20;">
            @if (SearchResults is not null)
            {
                <FluentMenu Open="@MenuOpen">
                    @if (SearchResults.Any())
                    {
                        @foreach (TreasuryItemViewModel result in SearchResults)
                        {
                            <FluentMenuItem @onmousedown="() => HandleMenuClick(result)">
                                <div class="search-option-row" style="display:flex;align-items:center;flex-wrap:wrap;padding:0.5rem;min-height:20px">
                                    <div title="Type" style="width:40px;">@result.Type</div>
                                    <FluentDivider Orientation="Orientation.Vertical" Style="height:15px;" Role="@DividerRole.Presentation"></FluentDivider>
                                    <div title="Term" style="width:70px;">@result.Term</div>
                                    <FluentDivider Orientation="Orientation.Vertical" Style="height:15px;" Role="@DividerRole.Presentation"></FluentDivider>
                                    <div title="Issue date">@result.IssueDate?.ToString(Statics.DateFormatString)</div>
                                </div>
                            </FluentMenuItem>
                        }
                    }
                    else
                    {
                        <FluentMenuItem>
                            <span>Not found</span>
                        </FluentMenuItem>
                    }
                </FluentMenu>
            }
        </div>
    </div>
</div>

@code
{
    FluentSearch? _fluentSearchRef;


    protected override void OnInitialized()
    {
        AppState.SearchComponent = this;
    }

    bool MenuOpen {get;set;}

    string SearchString
    {
        get;
        set
        {
            field = value;
            if (string.IsNullOrEmpty(field))
            {
                SearchResults = null;
            }
        }
    } = string.Empty;


    private List<TreasuryItemViewModel>? SearchResults {
        get;
        set
        {
            field = value;
            if (field == null)
            {
                MenuOpen = false;
            }
        }
    }

    async Task Search()
    {
        SearchResults = null;
        StateHasChanged();
        IEnumerable<Treasury>? treasuries = await TreasuryDataProvider.SearchTreasuriesAsync(SearchString);
        SearchResults = [];
        if (treasuries != null)
            foreach (Treasury t in treasuries)
                SearchResults.Add(new TreasuryItemViewModel
                {
                    Cusip = t.Cusip,
                    IssueDate = t.IssueDate,
                    MaturityDate = t.MaturityDate,
                    AuctionDate = t.AuctionDate,
                    Term = t.SecurityTerm,
                    Type = t.Type
                });
        await InvokeAsync(() => { _fluentSearchRef?.FocusAsync(); });
        StateHasChanged();
    }

    async Task HandleMenuClick(TreasuryItemViewModel treasuryItem)
    {
        DialogResult result = await DialogService.OpenCreateInvestmentDialogAsync(treasuryItem);

        if (result.Data is Investment newInvestment)
        {
            AddInvestmentAndResetList(newInvestment);
            Navigation.NavigateTo("investments");
        }
    }

    void AddInvestmentAndResetList(Investment newInvestment)
    {
        TreasuryDataProvider.Add(newInvestment);
        TreasuryDataProvider.Save();

        ToastService.ShowToast(new ToastOptions()
        {
            RenderStyle = ToastRenderStyle.Success,
            Title = "Success",
            Text = "The investment was saved.",
            ThemeMode = ToastThemeMode.Pastel
        });
        SearchString = string.Empty;

        OnSaveSearchResultInvestment?.Invoke();
    }

    public event Action? OnSaveSearchResultInvestment;
}