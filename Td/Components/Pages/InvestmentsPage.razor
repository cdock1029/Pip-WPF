@page "/investments"
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@implements IDisposable 
@inject PipDbContext DbContext
@inject AppState AppState
@inject IToastNotificationService ToastService

<PageTitle>Investments</PageTitle>

<div class="investments-container" style="height:100%;display:flex;flex-direction:column;">
    <FluentLabel Class="page-title" Typo="Typography.PageTitle" MarginBlock="default">
        Investments
    </FluentLabel>

    <div style="flex:1 0 auto;height:1px;display:flex;">

        @if (_showContent)
        {
            <DxGrid @ref="_grid"
                    Data="DataSource"
                    CssClass="flex-auto"
                    ShowGroupPanel="true"
                    ShowFilterRow="false"
                    ShowSearchBox="true"
                    AutoExpandAllGroupRows="true"
                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                    TextWrapEnabled="false"
                    EditMode="GridEditMode.EditRow"
                    EditModelSaving="OnEditModelSaving"
                    DataItemDeleting="OnDataItemDeleting"
                    CustomSort="OnCustomSort"
                    VirtualScrollingEnabled="false">
                <Columns>
                    <DxGridDataColumn FieldName="@nameof(Investment.Id)" Name="ID" MinWidth="20" DataRowEditorVisible="false"/>
                    <DxGridDataColumn FieldName="@nameof(Investment.Cusip)" Name="CUSIP" MinWidth="50" DataRowEditorVisible="false"/>
                    <DxGridDataColumn FieldName="@nameof(Investment.Type)" GroupIndex="0" MinWidth="50" DataRowEditorVisible="false"/>
                    <DxGridDataColumn FieldName="@nameof(Investment.IssueDate)" MinWidth="100" DataRowEditorVisible="false"/>
                    <DxGridDataColumn FieldName="@nameof(Investment.MaturityDate)" MinWidth="100" DataRowEditorVisible="false"/>
                    <DxGridDataColumn FieldName="@nameof(Investment.SecurityTerm)" MinWidth="100" DataRowEditorVisible="false" SortMode="GridColumnSortMode.Custom"/>
                    <DxGridDataColumn FieldName="@nameof(Investment.Par)" DisplayFormat="c0" MinWidth="100">
                        <EditSettings>
                            <DxSpinEditSettings Mask="@NumericMask.Currency" Increment="1"/>
                        </EditSettings>
                    </DxGridDataColumn>

                    <DxGridCommandColumn NewButtonVisible="false" Width="120px">

                        <CellDisplayTemplate>
                            @{
                                int index = context.VisibleIndex;
                                bool isEditing = _grid.IsEditing();
                            }
                            <div class="flex items-center justify-center">
                                <FluentIcon Value="@(new Size16.Edit())"
                                            Color="isEditing ? Color.Disabled : Color.Accent"
                                            Title="Edit"
                                            Class="mx-3"
                                            OnClick="() => { if (!isEditing) _grid.StartEditRowAsync(index); }"/>

                                <FluentIcon Value="@(new Size16.Delete())"
                                            Color="isEditing ? Color.Disabled : Color.Accent"
                                            Title="Delete"
                                            Class="mx-3"
                                            OnClick="() => { if (!isEditing) _grid.ShowRowDeleteConfirmation(index); }"/>
                            </div>
                        </CellDisplayTemplate>
                        <CellEditTemplate>
                            <div class="flex items-center justify-center">
                                <FluentIcon Value="@(new Size16.Save())"
                                            Color="Color.Accent"
                                            Title="Save"
                                            OnClick="@(() => _grid.SaveChangesAsync())"
                                            Class="mx-3"/>

                                <FluentIcon Value="@(new Size16.ArrowUndo())"
                                            Color="Color.Accent"
                                            Title="Cancel"
                                            OnClick="@(() => _grid.CancelEditAsync())"
                                            Class="mx-3"/>
                            </div>
                        </CellEditTemplate>

                    </DxGridCommandColumn>
                </Columns>
                <GroupSummary>
                    <DxGridSummaryItem FieldName="Par" SummaryType="GridSummaryItemType.Sum" ValueDisplayFormat="c0" DisplayText="Subtotal: {0}" FooterColumnName="Par"/>
                </GroupSummary>
                <TotalSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Par" DisplayText="Total: {0}"/>
                </TotalSummary>
            </DxGrid>
        }
    </div>
</div>

@code
{

    DxGrid _grid = null!;

    object DataSource { get; set; } = null!;

    bool _showContent = true;

    protected override void OnInitialized()
    {
        if (!AppState.RenderedPages.Contains(nameof(InvestmentsPage)))
        {
            _showContent = false;
            AppState.RenderedPages.Add(nameof(InvestmentsPage));
        }
        else
        {
            DataSource = DbContext.Investments.ToList();
        }

        if (AppState.SearchComponent != null) AppState.SearchComponent.OnSaveSearchResultInvestment += ReloadGrid;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_showContent || !firstRender) return;

        _showContent = true;
        DataSource = DbContext.Investments.ToList();
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }


    void OnDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        object? id = e.Grid.GetDataItemValue(e.DataItem, "Id");
        Investment? inv = DbContext.Investments.Find(id);
        if (inv == null) return;

        DbContext.Remove(inv);
        DbContext.SaveChanges();

        ToastService.ShowToast(new ToastOptions
        {
            RenderStyle = ToastRenderStyle.Info,
            Title = "Confirmed",
            Text = "The investment was deleted.",
            ThemeMode = ToastThemeMode.Pastel
        });

        DataSource = DbContext.Investments.ToList();
    }

    void OnEditModelSaving(GridEditModelSavingEventArgs args)
    {
        Investment? editModel = (Investment)args.EditModel;
        if (args.IsNew)
        {
            Investment inv = InvestmentUtils.Clone(editModel);
            DbContext.Add(inv);
        }
        else
        {
            Investment? curr = DbContext.Investments.Find(editModel.Id);
            curr?.CopyFrom(editModel);
        }

        DbContext.SaveChanges();
        ToastService.ShowToast(new ToastOptions
        {
            RenderStyle = ToastRenderStyle.Success,
            Title = "Success",
            Text = "The investment was saved.",
            ThemeMode = ToastThemeMode.Pastel
        });
        DataSource = DbContext.Investments.ToList();
    }

    private static void OnCustomSort(GridCustomSortEventArgs e)
    {
        if (e.FieldName != nameof(Investment.SecurityTerm)) return;
        Investment? inv1 = (Investment)e.DataItem1;
        Investment? inv2 = (Investment)e.DataItem2;

        e.Result = inv1.CompareTerm(inv2);
        e.Handled = true;
    }

    void ReloadGrid()
    {
        DataSource = DbContext.Investments.ToList();
        StateHasChanged();
    }

    public void Dispose()
    {
        if (AppState.SearchComponent != null) AppState.SearchComponent.OnSaveSearchResultInvestment -= ReloadGrid;
    }

}