@page "/treasury/{Cusip}/{IssueDate:datetime}"
@inject ITreasuryDataProvider TreasuryDataProvider

<h3>Treasury details</h3>

<FluentGrid>
    <FluentGridItem xs="12" sm="3">
        <div>
            <small>Cusip:</small>
            <FluentLabel>@Cusip</FluentLabel>
        </div>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="3">
        <div>
            <small>Issue date:</small>
            <FluentLabel>@DateOnly.FromDateTime(IssueDate).ToString(Statics.DateFormatString)</FluentLabel>
        </div>
    </FluentGridItem>

    @if (Treasury is not null)
    {
        <FluentGridItem xs="12" sm="3">
            <div>
                <small>Maturity date:</small>
                <FluentLabel>@Treasury.MaturityDate?.ToString(Statics.DateFormatString)</FluentLabel>
            </div>
        </FluentGridItem>
        <FluentGridItem xs="12" sm="3">
            <div>
                <small>Security term:</small>
                <FluentLabel>@Treasury.SecurityTerm</FluentLabel>
            </div>
        </FluentGridItem>
        <FluentGridItem xs="12" sm="3">
            <div>
                <small>High rate:</small>
                <FluentLabel>@Treasury.HighInvestmentRate</FluentLabel>
            </div>
        </FluentGridItem>
    }
</FluentGrid>

@code {

    [Parameter] public required string Cusip { get; set; }

    [Parameter] public required DateTime IssueDate { get; set; }

    Treasury? Treasury { get; set; }

    protected override void OnParametersSet()
    {
        var treasuryTask = TreasuryDataProvider.LookupTreasuryAsync(Cusip, DateOnly.FromDateTime(IssueDate));

        if (treasuryTask.IsCompleted)
        {
            Treasury = treasuryTask.Result;
        }
        else
        {
            InvokeAsync(async () =>
            {
                Treasury = await treasuryTask;
            });
        }
    }

}