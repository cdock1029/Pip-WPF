@page "/investments"
@using DevExpress.Data.Linq
@implements IDisposable 
@inject PipDbContext DbContext
@inject SearchComponentState SearchComponentState


<PageTitle>Investments</PageTitle>

<div class="investments-container" style="height:100%;display:flex;flex-direction:column;">
    <FluentLabel Typo="Typography.PageTitle" MarginBlock="default">
        Investments
    </FluentLabel>

    <div style="flex:1 0 auto;height:1px;display:flex;">

        <DxGrid @ref="_grid"
        Data="InvestmentsFeedbackSource"
        CssClass="flex-auto"
        ShowGroupPanel="true"
        ShowFilterRow="false"
        ShowSearchBox="true"
        AutoExpandAllGroupRows="true"
        ColumnResizeMode="GridColumnResizeMode.NextColumn"
        TextWrapEnabled="false"
        EditMode="GridEditMode.EditRow"
        EditModelSaving="OnEditModelSaving"
        DataItemDeleting="OnDataItemDeleting"
        VirtualScrollingEnabled="false">
            <Columns>
                <DxGridDataColumn FieldName="@nameof(Investment.Id)" Name="ID" MinWidth="20" DataRowEditorVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(Investment.Cusip)" Name="CUSIP" MinWidth="50" DataRowEditorVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(Investment.Type)" GroupIndex="0" MinWidth="50" DataRowEditorVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(Investment.IssueDate)" Name="Issue date" MinWidth="100" DataRowEditorVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(Investment.SecurityTerm)" Name="Term" MinWidth="100" DataRowEditorVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(Investment.Par)" DisplayFormat="c0" MinWidth="100">
                    <EditSettings>
                        <DxSpinEditSettings Mask="@NumericMask.Currency" Increment="1"/>
                    </EditSettings>
                </DxGridDataColumn>

                <DxGridCommandColumn NewButtonVisible="false" Width="120px">

                    <CellDisplayTemplate>
                        @{
                            var index = context.VisibleIndex;
                            var isEditing = _grid.IsEditing();
                        }
                        <div class="flex items-center justify-center">
                            <FluentIcon Value="@(new Icons.Regular.Size16.Edit())"
                            Color="isEditing ? Color.Disabled : Color.Accent"
                            Title="Edit"
                            Class="mx-3"
                            OnClick="() => { if (!isEditing) _grid.StartEditRowAsync(index); }"/>

                            <FluentIcon Value="@(new Icons.Regular.Size16.Delete())"
                            Color="isEditing ? Color.Disabled : Color.Accent"
                            Title="Delete"
                            Class="mx-3"
                            OnClick="() => { if (!isEditing) _grid.ShowRowDeleteConfirmation(index); }"/>
                        </div>
                    </CellDisplayTemplate>
                    <CellEditTemplate>
                        <div class="flex items-center justify-center">
                            <FluentIcon Value="@(new Icons.Regular.Size16.Save())"
                            Color="Color.Accent"
                            Title="Save"
                            OnClick="@(() => _grid.SaveChangesAsync())"
                            Class="mx-3"/>

                            <FluentIcon Value="@(new Icons.Regular.Size16.ArrowUndo())"
                            Color="Color.Accent"
                            Title="Cancel"
                            OnClick="@(() => _grid.CancelEditAsync())"
                            Class="mx-3"/>
                        </div>
                    </CellEditTemplate>

                </DxGridCommandColumn>
            </Columns>
            <GroupSummary>
                <DxGridSummaryItem FieldName="Par" SummaryType="GridSummaryItemType.Sum" ValueDisplayFormat="c0" DisplayText="Subtotal: {0}" FooterColumnName="Par"/>
            </GroupSummary>
            <TotalSummary>
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Par" DisplayText="Total: {0}"/>
            </TotalSummary>
        </DxGrid>

    </div>
</div>

@code
{

    DxGrid _grid = null!;

    EntityInstantFeedbackSource InvestmentsFeedbackSource { get; set; } = null!;

    protected override void OnInitialized()
    {
        InvestmentsFeedbackSource = new EntityInstantFeedbackSource(e =>
        {
            e.KeyExpression = "Id";
            e.QueryableSource = DbContext.Investments.AsQueryable();
        });
        SearchComponentState.OnSearchResultSaveInvestment += ReloadGrid;
    }

    void OnDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var id = e.Grid.GetDataItemValue(e.DataItem, "Id");
        var inv = DbContext.Investments.Find(id);
        if (inv == null) return;

        DbContext.Remove(inv);
        DbContext.SaveChanges();
    }

    void OnEditModelSaving(GridEditModelSavingEventArgs args)
    {
        var editModel = (Investment)args.EditModel;
        if (args.IsNew)
        {
            var inv = InvestmentMapper.Clone(editModel);
            DbContext.Add(inv);
        }
        else
        {
            var curr = DbContext.Investments.Find(editModel.Id);
            curr?.CopyFrom(editModel);
        }
        DbContext.SaveChanges();
    }

    void ReloadGrid()
    {
        _grid.Reload();
        StateHasChanged();
    }

    public void Dispose()
    {
        Debug.WriteLine("disposing in Investments page");
        InvestmentsFeedbackSource.Dispose();
        SearchComponentState.OnSearchResultSaveInvestment -= ReloadGrid;
    }
}