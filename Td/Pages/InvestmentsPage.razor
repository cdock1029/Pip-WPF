@page "/investments"
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@inherits BaseStateComponent<InvestmentPageState>


<PageTitle>Investments</PageTitle>

<div class="investments-container" style="height:100%;display:flex;flex-direction:column;">
    <FluentLabel Typo="Typography.PageTitle" MarginBlock="default">
        Investments
    </FluentLabel>

    <div style="flex:1 0 auto;height:1px;display:flex;">


        @*   <DxGrid @ref="_grid" Data="@StateContainer.Investments"
                CssClass="flex-auto"
                ShowGroupPanel="true"
                ShowFilterRow="false"
                ShowSearchBox="true"
                AutoExpandAllGroupRows="true"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                TextWrapEnabled="false"
                EditMode="GridEditMode.EditRow"
                EditModelSaving="OnEditModelSaving"
                DataItemDeleting="OnDataItemDeleting"
                VirtualScrollingEnabled="false">
            <Columns>

                <DxGridDataColumn FieldName="@nameof(Investment.Cusip)" Name="CUSIP" MinWidth="50" DataRowEditorVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(Investment.Type)" GroupIndex="0" MinWidth="50" DataRowEditorVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(Investment.IssueDate)" Name="Issue date" MinWidth="100" DataRowEditorVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(Investment.SecurityTerm)" Name="Term" MinWidth="100" DataRowEditorVisible="false"/>
                <DxGridDataColumn FieldName="@nameof(Investment.Par)" DisplayFormat="c0" MinWidth="100">
                    <EditSettings>
                        <DxSpinEditSettings Mask="@NumericMask.Currency" Increment="1"/>
                    </EditSettings>
                </DxGridDataColumn>

                <DxGridCommandColumn NewButtonVisible="false" Width="120px">

                    <CellDisplayTemplate>
                        @{
                            var index = context.VisibleIndex;
                            var isEditing = _grid.IsEditing();
                        }
                        <div class="flex items-center justify-center">
                            <FluentIcon Value="@(new Size16.Edit())"
                                        Color="isEditing ? Color.Disabled : Color.Accent"
                                        Title="Edit"
                                        Class="mx-3"
                                        OnClick="() => { if (!isEditing) _grid.StartEditRowAsync(index); }"/>

                            <FluentIcon Value="@(new Size16.Delete())"
                                        Color="isEditing ? Color.Disabled : Color.Accent"
                                        Title="Delete"
                                        Class="mx-3"
                                        OnClick="@(() =>
                                                 {
                                                     if (!isEditing) _grid.ShowRowDeleteConfirmation(index);
                                                 })"/>
                        </div>
                    </CellDisplayTemplate>
                    <CellEditTemplate>
                        <div class="flex items-center justify-center">
                            <FluentIcon Value="@(new Size16.Save())"
                                        Color="Color.Accent"
                                        Title="Save"
                                        OnClick="@(() => _grid.SaveChangesAsync())"
                                        Class="mx-3"/>

                            <FluentIcon Value="@(new Size16.ArrowUndo())"
                                        Color="Color.Accent"
                                        Title="Cancel"
                                        OnClick="@(() => _grid.CancelEditAsync())"
                                        Class="mx-3"/>
                        </div>
                    </CellEditTemplate>

                </DxGridCommandColumn>
            </Columns>
            <GroupSummary>
                <DxGridSummaryItem FieldName="Par" SummaryType="GridSummaryItemType.Sum" ValueDisplayFormat="c0" DisplayText="Subtotal: {0}" FooterColumnName="Par"/>
            </GroupSummary>
            <TotalSummary>
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Par" DisplayText="Total: {0}"/>
            </TotalSummary>
        </DxGrid> *@

        <div class="flex-auto">
            <SfGrid DataSource="@StateContainer.Investments" Toolbar="_toolbarItems" AllowPaging="false" AllowGrouping="true" AllowSorting="true" Height="100%" Width="100%" RowHeight="30">
                <GridGroupSettings Columns="[nameof(Investment.Type)]"></GridGroupSettings>
                <GridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true"></GridEditSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(Investment.Id)" HeaderText="ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field="@nameof(Investment.Cusip)" HeaderText="Customer ID" Width="150"></GridColumn>
                    <GridColumn Field="@nameof(Investment.Type)" EditType="EditType.DropDownEdit" Width="130"></GridColumn>
                    <GridColumn Field="@nameof(Investment.IssueDate)" HeaderText="Issue Date" Format="d" Type="ColumnType.DateOnly" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                    <GridColumn Field="@nameof(Investment.Par)" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field="@nameof(Investment.SecurityTerm)" HeaderText="Term" SortComparer="new TermComparer()" Width="150"></GridColumn>
                </GridColumns>
                <GridAggregates>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Field="@nameof(Investment.Par)" Type="AggregateType.Sum" Format="C0">
                                <GroupFooterTemplate>
                                    @{
                                        var groupTotalContext = context as AggregateTemplateContext;
                                    }
                                    <div>Subtotal: @groupTotalContext?.Sum</div>
                                </GroupFooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Field="@nameof(Investment.Par)" Type="AggregateType.Sum" Format="C0">
                                <FooterTemplate>
                                    @{
                                        var totalContext = context as AggregateTemplateContext;
                                    }
                                    <div class="py-1">Total: @totalContext?.Sum</div>
                                </FooterTemplate>
                            </GridAggregateColumn>
                        </GridAggregateColumns>
                    </GridAggregate>
                </GridAggregates>
            </SfGrid>
        </div>

    </div>
</div>

@code
{

    private readonly string[] _toolbarItems = ["Add", "Edit", "Delete", "Update", "Cancel"];

    /*
    private IEditorSettings _typeEditParams = new DropDownEditCellParams()
    {
        Params = new DropDownListModel<object, TreasuryType>()
        {
            DataSource = Enum.GetValues<TreasuryType>().AsEnumerable()
        }
    };
    */

    private void OnDataItemDeleting(GridDataItemDeletingEventArgs args)
    {
        var investment = (Investment)args.DataItem;
        StateContainer.DeleteInvestment(investment);
        StateContainer.LoadData();
    }

    private void OnEditModelSaving(GridEditModelSavingEventArgs args)
    {
        var editInvestment = (Investment)args.EditModel;

        if (args.IsNew)
            StateContainer.Create(editInvestment);
        else
        {
            args.CopyChangesToDataItem();
            StateContainer.Update((Investment)args.DataItem);
        }

        StateContainer.LoadData();
    }

    public class TermComparer : IComparer<object>
    {
        public int Compare(object? x, object? y)
        {
            var investmentX = x as Investment;
            var investmentY = y as Investment;

            var xSpan = investmentX?.MaturityDate is null || investmentX?.IssueDate is null
                ? 0
                : investmentX.MaturityDate.Value.DayNumber - investmentX.IssueDate.Value.DayNumber;


            var ySpan = investmentY?.MaturityDate is null || investmentY?.IssueDate is null
                ? 0
                : investmentY.MaturityDate.Value.DayNumber - investmentY.IssueDate.Value.DayNumber;


            return xSpan.CompareTo(ySpan);
        }
    }
}